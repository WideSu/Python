#array version:
def merge_two(list1,list2):
  new_list =[]
  i = 0
  j = 0
  while i < len(list1) and j < len(list2):
    if list1[i] < list2[j]:
      new_list.append(list1[i])
      i += 1
    else:
      new_list.append(list2[j])
      j += 1
  while i < len(list1):
    new_list.append(list1[i])
    i += 1
  while j < len(list2):
    new_list.append(list2[j])
    j += 1
  return new_list

def merge_sort(array):
  if len(array) == 0 or len(array) == 1:
    return array
  middle = (len(array)+1)//2 #5//2 = 2
  left = merge_sort(array[:middle])
  right = merge_sort(array[middle:])
  result = merge_two(left,right)
  return result

#linked list version
##beacause linked list cannot use index, so we need to create a function to split linked list into two.
def mergeSort(head):
  if not head or not head.next:
    return head
  one, two = split(head)
  one = mergeSort(one)
  two = mergeSort(two)
  return merge(one,two)
  
def split(head):
  slow, fast = head, head.next
  while fast and fast.next:
    slow = slow.next
    fast = fast.next.next
  head2 = slow.next
  slow.next = None
  return head, head2
  
def merge(one,two):
  prev = ListNode(None)
  curr = prev
  while one and two:
    if one.val < two.val:
      curr.next = one
      one = one.next
      curr = curr.next
    else:
      curr.next = two
      two = two.next
      curr = curr.next
  if one: 
    curr.next = one
  else:
    curr.next = two
  return prev.next 
